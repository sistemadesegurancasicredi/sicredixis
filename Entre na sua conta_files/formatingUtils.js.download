function onlyNumbers(field) {
  field.value = field.value.replace(/\D/g, '');
}

function formatCPF(field) {

  if (!field || !field.value) {
    return;
  }

  onlyNumbers(field);

  if (field.value.length) {
    const formated = String(field.value)
      .replace(/\D/g, '')
      .slice(0, 11)
      .replace(/(\d{3})(\d{1,3})/, '$1.$2')
      .replace(/(\d{3})(\d{1,3})/, '$1.$2')
      .replace(/(\d{3}\.{1}\d{3}\.{1}\d{3})(\d{1,2})/, '$1-$2');

    field.value = formated;
  }
}

function formatCooperative(field) {
  onlyNumbers(field);

  field.value = String(field.value).padStart(4, '0');
}

function addAccontMask(field) {
  if (!field || !field.value || field.value.length < 2) {
    return;
  }

  const value = field.value;
  const length = value.length;

  field.value = `${value.slice(0, length - 1)}-${value.slice(length - 1, length)}`;
}

function addZerosToAccountStart(field) {
  onlyNumbers(field);

  const value = field.value;

  if (value.length < MIN_ACCOUNT_LENGTH) {
    field.value = String(value).padStart(MIN_ACCOUNT_LENGTH, '0');
  }

  addAccontMask(field);
}

function formatAccount(field) {
  onlyNumbers(field);
  addAccontMask(field);
}
